allByStatus:
SELECT
  articles.id,
  articles.feed_id,
  articles.title,
  articles.author,
  articles.extracted_content_url,
  articles.url,
  articles.summary,
  articles.image_url,
  articles.published_at,
  feeds.title AS feed_title,
  feeds.favicon_url,
  article_statuses.updated_at,
  article_statuses.starred,
  article_statuses.read
FROM articles
JOIN feeds ON articles.feed_id = feeds.id
JOIN article_statuses ON articles.id = article_statuses.article_id
WHERE ((article_statuses.read = :read AND article_statuses.last_read_at IS NULL OR article_statuses.last_read_at >= :lastReadAt) OR :read IS NULL)
AND (article_statuses.starred = :starred OR :starred IS NULL)
AND (articles.title LIKE '%' || :query || '%' OR articles.summary  LIKE '%' || :query || '%' OR :query IS NULL)
GROUP BY articles.id
ORDER BY articles.published_at DESC
LIMIT :limit OFFSET :offset;

countAllByStatus:
SELECT COUNT(*)
FROM articles
JOIN article_statuses ON articles.id = article_statuses.article_id
WHERE ((article_statuses.read = :read AND article_statuses.last_read_at IS NULL OR article_statuses.last_read_at >= :lastReadAt) OR :read IS NULL)
AND (article_statuses.starred = :starred OR :starred IS NULL)
AND (articles.title LIKE '%' || :query || '%' OR articles.summary  LIKE '%' || :query || '%' OR :query IS NULL);

allByFeeds:
SELECT
  articles.id,
  articles.feed_id,
  articles.title,
  articles.author,
  articles.extracted_content_url,
  articles.url,
  articles.summary,
  articles.image_url,
  articles.published_at,
  feeds.title AS feed_title,
  feeds.favicon_url,
  article_statuses.updated_at,
  article_statuses.starred,
  article_statuses.read
FROM articles
JOIN feeds ON articles.feed_id = feeds.id
JOIN article_statuses ON articles.id = article_statuses.article_id
WHERE articles.feed_id IN :feedIDs
AND ((article_statuses.read = :read AND article_statuses.last_read_at IS NULL OR article_statuses.last_read_at >= :lastReadAt) OR :read IS NULL)
AND (article_statuses.starred = :starred OR :starred IS NULL)
AND (articles.title LIKE '%' || :query || '%' OR articles.summary  LIKE '%' || :query || '%' OR :query IS NULL)
GROUP BY articles.id
ORDER BY articles.published_at DESC
LIMIT :limit OFFSET :offset;

countAllByFeeds:
SELECT COUNT(*)
FROM articles
JOIN article_statuses ON articles.id = article_statuses.article_id
WHERE articles.feed_id IN :feedIDs
AND ((article_statuses.read = :read AND article_statuses.last_read_at IS NULL OR article_statuses.last_read_at >= :lastReadAt) OR :read IS NULL)
AND (articles.title LIKE '%' || :query || '%' OR articles.summary  LIKE '%' || :query || '%' OR :query IS NULL)
AND (article_statuses.starred = :starred OR :starred IS NULL);

findArticleIDsByStatus:
SELECT articles.id
FROM articles
JOIN article_statuses ON articles.id = article_statuses.article_id
WHERE read != 1
AND (article_statuses.starred = :starred OR :starred IS NULL)
AND (
  :afterArticleID IS NULL
  OR articles.published_at >= (
      SELECT published_at
      FROM articles
      WHERE articles.id = :afterArticleID
      LIMIT 1
  )
)
AND (:beforeArticleID IS NULL OR
  :beforeArticleID IS NULL
  OR articles.published_at <= (
      SELECT published_at
      FROM articles
      WHERE articles.id = :beforeArticleID
      LIMIT 1
  )
);

findArticleIDsByFeeds:
SELECT articles.id
FROM articles
JOIN article_statuses ON articles.id = article_statuses.article_id
WHERE articles.feed_id IN :feedIDs
AND read != 1
AND (article_statuses.starred = :starred OR :starred IS NULL)
AND (
  :afterArticleID IS NULL
  OR articles.published_at >= (
      SELECT published_at
      FROM articles
      WHERE articles.id = :afterArticleID
      LIMIT 1
  )
)
AND (:beforeArticleID IS NULL OR
  :beforeArticleID IS NULL
  OR articles.published_at <= (
      SELECT published_at
      FROM articles
      WHERE articles.id = :beforeArticleID
      LIMIT 1
  )
);

findBy:
SELECT
  articles.*,
  feeds.title AS feed_title,
  feeds.favicon_url,
  feeds.enable_sticky_full_content,
  feeds.feed_url,
  article_statuses.updated_at,
  article_statuses.starred,
  article_statuses.read
FROM articles
JOIN feeds ON articles.feed_id = feeds.id
JOIN article_statuses ON articles.id = article_statuses.article_id
WHERE articles.id = :articleID
LIMIT 1;

countAll:
SELECT
 articles.feed_id,
 COUNT(DISTINCT articles.id)
FROM articles
JOIN article_statuses ON articles.id = article_statuses.article_id
WHERE (article_statuses.read = :read OR :read IS NULL)
AND (article_statuses.starred = :starred OR :starred IS NULL)
GROUP BY articles.feed_id;

lastUpdatedAt:
SELECT MAX(article_statuses.updated_at)
FROM article_statuses;

findMissingArticles:
SELECT article_id
FROM article_statuses
LEFT OUTER JOIN articles ON article_statuses.article_id = articles.id
WHERE articles.id IS NULL
AND article_statuses.read = 0 OR article_statuses.starred = 1;

create:
INSERT INTO articles(
    id,
    feed_id,
    title,
    author,
    content_html,
    extracted_content_url,
    url,
    summary,
    image_url,
    published_at
)
VALUES (
:id,
:feed_id,
:title,
:author,
:content_html,
:extracted_content_url,
:url,
:summary,
:image_url,
:published_at
)
ON CONFLICT(id) DO UPDATE
SET
id = id,
feed_id = excluded.feed_id,
title = excluded.title,
author = excluded.author,
content_html = excluded.content_html,
extracted_content_url = excluded.extracted_content_url,
url = excluded.url,
summary = excluded.summary,
image_url = excluded.image_url,
published_at = published_at;

updateStatus:
INSERT INTO article_statuses(
  article_id,
  updated_at,
  read
)
VALUES (
:article_id,
:updated_at,
:read
)
ON CONFLICT(article_id) DO UPDATE
SET updated_at = excluded.updated_at, read = read, last_read_at = last_read_at;

upsertUnread:
INSERT INTO article_statuses(
  article_id,
  updated_at,
  read,
  last_read_at
)
VALUES (
  :articleID,
  :updatedAt,
  0,
  NULL
)
ON CONFLICT(article_id) DO UPDATE
SET
updated_at = excluded.updated_at,
last_read_at = excluded.last_read_at,
read = excluded.read,
starred = starred;

updateStaleUnreads:
UPDATE article_statuses SET read = 1 WHERE article_id NOT IN :excludedIDs;

updateStaleStars:
UPDATE article_statuses SET starred = 0 WHERE article_id NOT IN :excludedIDs;

upsertStarred:
INSERT INTO article_statuses(
  article_id,
  updated_at,
  starred
)
VALUES (
  :articleID,
  :updatedAt,
  1
)
ON CONFLICT(article_id) DO UPDATE
SET
updated_at = excluded.updated_at,
last_read_at = last_read_at,
read = read,
starred = excluded.starred;

markRead:
UPDATE article_statuses SET read = :read, last_read_at = :lastReadAt, updated_at = :updatedAt
WHERE article_statuses.article_id IN :articleIDs;

markStarred:
UPDATE article_statuses SET starred = :starred, updated_at = :updatedAt
WHERE article_statuses.article_id = :articleID;

deleteAllArticles {
  DELETE FROM article_statuses;
  DELETE FROM articles;
}

deleteArticles {
  DELETE FROM article_statuses WHERE starred = 0 AND read = 1 AND article_id IN (
    SELECT id
    FROM articles
    WHERE published_at < :publishedBefore
  );

  DELETE FROM articles WHERE id NOT IN (SELECT article_id FROM article_statuses);
}
