{
  "version": "https://jsonfeed.org/version/1",
  "title": "xyzeva's blog",
  "home_page_url": "https://kibty.town/",
  "feed_url": "https://kibty.town/blog.json",
  "description": "random thoughts and other stuff",
  "items": [
    {
      "id": "https://kibty.town/blog/arc/",
      "url": "https://kibty.town/blog/arc/",
      "title": "gaining access to anyones browser without them even visiting a website",
      "content_html": "<p>we start at the homepage of arc. where i first landed when i first heard of it. i snatched a download and started analysing, the first thing i realised was that arc requires an account to use, why do they require an account?",
      "date_published": "Sat, 07 Sep 2024 00:00:00 GMT"
    },
    {
      "id": "https://kibty.town/blog/a16z/",
      "url": "https://kibty.town/blog/a16z/",
      "title": "how to pwn a billion dollar vc firm using inspect element",
      "content_html": "<h2>background</h2>\n<p>i like to do this thing where i search twitter, looking for companies, and then try giving them a quick pentest. i've done a lot of my hacks this way and its more effective than you think it is.</p>\n<p>on this search, i use the &quot;Relevant People&quot; tab more often than you think, this is how i got to a16z</p>\n<ul>\n<li>crypto bullshit -&gt; venture capital firms for crypto -&gt; a16z crypto -&gt; a16z</li>\n</ul>\n<h2>the hack</h2>\n<p>while looking into a16z, i did a usual subdomain scan and used tooling from <a href=\"https://lunchcat.dev/\">lunchcat</a> which does common checks on domains, scanning for secrets in js files, etc.</p>\n<p>in this search, i came across <code>portfolio.a16z.com</code>, a site that seems like a portfolio management tool for companies that are in a16z. while doing cursory checks like i usually do, lunchcat seemed to catch a AWS key referenced somewhere in the website.</p>\n<p>i confirmed this and what i saw in the js, was this.</p>\n<pre><code class=\"language-js\">{\n    MARKETPLACE_URL: &quot;&lt;REDACTED&gt;&quot;,\n    DATABASE_URL: &quot;&lt;REDACTED&gt;&quot;,\n    SALESFORCE_CLIENT_ID: &quot;&lt;REDACTED&gt;&quot;,\n    SALESFORCE_SECURITY_TOKEN: &quot;&lt;REDACTED&gt;&quot;,\n    npm_config_user_agent: &quot;&lt;REDACTED&gt;&quot;,\n    SALESFORCE_CLIENT_SECRET: &quot;&lt;REDACTED&gt;&quot;,\n    SALESFORCE_USERNAME: &quot;&lt;REDACTED&gt;&quot;,\n    OKTA_CLIENT_ID: &quot;&lt;REDACTED&gt;&quot;,\n    OKTA_CLIENT_SECRET: &quot;&lt;REDACTED&gt;&quot;,\n    SESSION_SECRET: &quot;&lt;REDACTED&gt;&quot;,\n    API_USERNAME: &quot;&lt;REDACTED&gt;&quot;,\n    GOOGLE_CLIENT_ID_DEVELOPMENT: &quot;&lt;REDACTED&gt;&quot;,\n    CLIENT_TOKEN_SECRET: &quot;&lt;REDACTED&gt;&quot;,\n    GOOGLE_CLIENT_SECRET_DEVELOPMENT: &quot;&lt;REDACTED&gt;&quot;,\n    AWS_BUCKET_NAME: &quot;&lt;REDACTED&gt;&quot;,\n    npm_config_prefix: &quot;&lt;REDACTED&gt;&quot;,\n    REACT_APP_SENTRY_DSN: &quot;&lt;REDACTED&gt;&quot;,\n    AWS_BUCKET_TEAM_PAGES: &quot;&lt;REDACTED&gt;&quot;,\n    MAILGUN_API_KEY: &quot;&lt;REDACTED&gt;&quot;,\n    GOOGLE_CLIENT_ID: &quot;&lt;REDACTED&gt;&quot;,\n    AWS_LOGO_BUCKET_URL: &quot;&lt;REDACTED&gt;&quot;,\n    SALESFORCE_KEY: &quot;&lt;REDACTED&gt;&quot;,\n    GOOGLE_CLIENT_SECRET: &quot;&lt;REDACTED&gt;&quot;,\n    PAPERTRAIL_API_TOKEN: &quot;&lt;REDACTED&gt;&quot;,\n    MAILGUN_PASSWORD: &quot;&lt;REDACTED&gt;&quot;,\n    OKTA_CALLBACK_URL: &quot;&lt;REDACTED&gt;&quot;,\n    SALESFORCE_PASSWORD: &quot;&lt;REDACTED&gt;&quot;,\n    MAILGUN_USER: &quot;&lt;REDACTED&gt;&quot;,\n    AWS_ACCESS_KEY_ID: &quot;&lt;REDACTED&gt;&quot;,\n    PNPM_CONFIG_CACHE: &quot;&lt;REDACTED&gt;&quot;,\n    AWS_SECRET_ACCESS_KEY: &quot;&lt;REDACTED&gt;&quot;,\n    MAILGUN_DOMAIN: &quot;&lt;REDACTED&gt;&quot;,\n    GOOGLE_CALLBACK_URL_DEVELOPMENT: &quot;&lt;REDACTED&gt;&quot;,\n    API_PASSWORD: &quot;&lt;REDACTED&gt;&quot;,\n    SENTRY_DSN: &quot;&lt;REDACTED&gt;&quot;,\n    SALESFORCE_LOGIN_URL: &quot;&lt;REDACTED&gt;&quot;,\n    COOKIE_SECRET: &quot;&lt;REDACTED&gt;&quot;,\n    OKTA_DOMAIN: &quot;&lt;REDACTED&gt;&quot;,\n    NODE_MODULES_CACHE: &quot;&lt;REDACTED&gt;&quot;,\n    GOOGLE_CALLBACK_URL: &quot;&lt;REDACTED&gt;&quot;,,\n    NODE_ENV: &quot;&lt;REDACTED&gt;&quot;,\n    HEROKU_POSTGRESQL_CRIMSON_URL: &quot;&lt;REDACTED&gt;&quot;,\n    TALENTPLACE_URL: &quot;&lt;REDACTED&gt;&quot;,\n}\n</code></pre>\n<p>this was. horrifying, it was the entire <code>process.env</code> of a heroku instance, in the JS. put in dynamically.</p>\n<p>i did a quick valid look of the credentials and they didnt seem like fake credentials. they. were. real. and all someone had to do find them was go to the sources tab of inspect element.</p>\n<h2>impact</h2>\n<p>the compromised list of services:</p>\n<ul>\n<li>their database (containing PII)</li>\n<li>their AWS</li>\n<li>their salesforce (never checked, account may be limited)</li>\n<li>mailgun (arbitrary emails from a16z domains, and also could read older emails)</li>\n<li>... and probably more</li>\n</ul>\n<h2>reward</h2>\n<p>a16z did not give me any bug bounty on this because of the fact i publicly reached out instead of trying to reach out privately. the only reason i did it this way was because:</p>\n<ul>\n<li>there was no available contact on their main site</li>\n<li>the email i could find <code>engineering@a16z.com</code> bounced my emails</li>\n</ul>\n<p>so, i dunno. imo this is unfair.</p>\n<h2>related</h2>\n<p>techcrunch article (lorenzo reached out to me seeing my tweet trying to get in contact with them and wrote a piece!): https://techcrunch.com/2024/07/18/researcher-finds-flaw-in-a16z-website-that-exposed-some-company-data/</p>\n",
      "date_published": "Sat, 20 Jul 2024 00:00:00 GMT"
    },
    {
      "id": "https://kibty.town/blog/chattr/",
      "url": "https://kibty.town/blog/chattr/",
      "title": "how we owned almost all of america's fast food chains",
      "content_html": "<p><strong>check out <a href=\"https://mrbruh.com/chattr/\">mrbruhs blogpost</a> if you havent already</strong></p>\n<p>so recently i was on call <a href=\"https://mrbruh.com/\">with</a> some friends messing with some other stuff when we remembered the existence of a scanner we made for firebase and found https://chattr.ai and realised they used firebase, we didnt know much about firebase at the time so we simply tried to find a tool to see if it was vulnerable to something obvious and we found <a href=\"https://github.com/0xbigshaq/firepwn-tool/\">firepwn</a>, which seemed nice for a GUI tool, so we simply entered the details of chattr's firebase.</p>\n<p>at first, we got permission denied for everything, so we thought it was safe. but then we tried registering a account with firebase manually, and once we signed in, we could see literally everything.</p>\n<p>we were in a call at the time, and our reaction to this was insane, as if we look at chattr's website, they manage hiring for a <em>lot</em> of fast food chains.</p>\n<p><img src=\"https://kibty.town/files/img/posts/chattr/companies.png\" alt=\"Carousel displaying &quot;Taco Bell&quot;, &quot;KFC&quot;, &quot;Double Tree&quot;, &quot;Jimmy John's&quot;, &quot;Wendy's&quot; and &quot;Village Inn&quot; on chattr.ai\"></p>\n<h2>going from bad to worse</h2>\n<p>at this point, we had quite a lot of access but we wanted to see how bad this could get. so we kept searching, and after looking at the admin dashboard javascript for a while we found these firestore collections:</p>\n<ul>\n<li>dialog</li>\n<li>jobCategories</li>\n<li>questions</li>\n<li>candidates</li>\n<li>candidateJobs</li>\n<li>orgs</li>\n<li>orgs/<code>{orgID}</code>/candidateJobs</li>\n<li>orgs/<code>{orgID}</code>/conversations</li>\n<li>orgs/<code>{orgID}</code>/groups</li>\n<li>orgs/<code>{orgID}</code>/jobs</li>\n<li>orgs/<code>{orgID}</code>/locations</li>\n<li>orgs/<code>{orgID}</code>/notifications</li>\n<li>orgs/<code>{orgID}</code>/users</li>\n</ul>\n<p>these leaked quite a <em>lot</em> but what we were most interested in was getting access to the admin dashboard or getting a admin account, we quickly found out all of the admin accounts are in the organization of <code>0</code> which seems to be the chattr organization. if we look at one of these users we'll see this:</p>\n<pre><code class=\"language-json\">{\n    &quot;createdDt&quot;: REDACTED,\n    &quot;id&quot;: &quot;REDACTED&quot;,\n    &quot;phone&quot;: &quot;&quot;,\n    &quot;shouldRefresh&quot;: false,\n    &quot;jobTitle&quot;: &quot;&quot;,\n    &quot;forceLogout&quot;: false,\n    &quot;locations&quot;: [],\n    &quot;combinedLocations&quot;: [],\n    &quot;scheduleOptions&quot;: [],\n    &quot;lastLoginDt&quot;: REDACTED,\n    &quot;modifiedDt&quot;: REDACTED,\n    &quot;status&quot;: &quot;active&quot;,\n    &quot;isDeleted&quot;: false,\n    &quot;email&quot;: &quot;REDACTED@chattr.ai&quot;,\n    &quot;createdBy&quot;: {\n      &quot;id&quot;: &quot;REDACTED&quot;,\n      &quot;email&quot;: &quot;REDACTED@chattr.ai&quot;\n    },\n    &quot;providerId&quot;: &quot;REDACTED&quot;,\n    &quot;ghostOrg&quot;: &quot;0&quot;,\n    &quot;modifiedBySource&quot;: &quot;api-middleware-user-activity&quot;,\n    &quot;roles&quot;: [\n      &quot;SuperAdmin&quot;\n    ],\n    &quot;groups&quot;: [],\n    &quot;modifiedBy&quot;: null,\n    &quot;orgId&quot;: &quot;0&quot;,\n    &quot;lastActivity&quot;: REDACTED,\n    &quot;firstname&quot;: &quot;REDACTED&quot;,\n    &quot;lastname&quot;: &quot;REDACTED&quot;,\n    &quot;timezone&quot;: &quot;America/New_York&quot;\n  }\n\n</code></pre>\n<p>so out of pure curiosity i tried to create a document with a random id and replaced the provider id with our fake user id copying this document, and out of nowhere it worked:</p>\n<p><img src=\"https://kibty.town/files/img/posts/chattr/admin-overview.png\" alt=\"Photo of the chattr admin dashboard, text saying &quot;one dream. one team.&quot; with the chattr logo\"></p>\n<p>and the impact here is obvious:</p>\n<p><img src=\"https://kibty.town/files/img/posts/chattr/admin-superadmins.png\" alt=\"Photo of the chattr admin dashboard, list of all admins of the service\"></p>\n<p>... and more:</p>\n<p><img src=\"https://kibty.town/files/img/posts/chattr/admin-orgs.png\" alt=\"Photo of the chattr admin dashboard, list of all orgs using the service\"></p>\n<p>... and even more:</p>\n<p><img src=\"https://kibty.town/files/img/posts/chattr/admin-candidate-apply-convo.png\" alt=\"Photo of a conversation between the application bot and a candidate\"></p>\n<h2>going from worse to catastrophic</h2>\n<p>we soon realised from this admin dashboard, we could view conversations of candidates, phone numbers, profile pictures and more very powerful stuff from this admin panel, but while looking around on their app i randomly went to their actual user interface where i discovered something <em>very</em> interesting.</p>\n<p>there was a &quot;ghost&quot; mode where superadmins could access someone elses account and fully control them, this was where i discovered the fact that we could view <em>billing info</em> with this:</p>\n<p><img src=\"https://kibty.town/files/img/posts/chattr/ghost-stripe.png\" alt=\"Photo of a stripe reciept from Chattr\"></p>\n<p>we could also hire people and do other stuff with the ghost mode.</p>\n<h2>lets tldr</h2>\n<p>so, that was one hell of a ride but the basic TLDR is that</p>\n<p>big hiring company got fully pwned by a really stupid vulnerability that couldve been prevented really easily, the following data was exposed:</p>\n<ul>\n<li><strong>billing information</strong></li>\n<li><strong>plaintext passwords</strong> (only 6 or so accounts had this)</li>\n<li>phone numbers</li>\n<li>resumes</li>\n<li>emails</li>\n<li>full application conversation</li>\n<li>candidate notes</li>\n<li>profile pictures</li>\n<li>addresses</li>\n<li>all notifications</li>\n<li>company phone numbers</li>\n<li>pay info</li>\n</ul>\n<h2>credits</h2>\n<ul>\n<li>logykk</li>\n<li>mrbruh (<a href=\"https://mrbruh.com/chattr/\">his article</a>)</li>\n</ul>\n<p><strong>we did not save any info other then the screenshots above and maybe a few more, we did make sure to get rid of extremely sensetive personal information.</strong></p>\n",
      "date_published": "Wed, 10 Jan 2024 00:00:00 GMT"
    },
    {
      "id": "https://kibty.town/blog/microsoft-pwnage/",
      "url": "https://kibty.town/blog/microsoft-pwnage/",
      "title": "how to pwn microsoft",
      "content_html": "<p>This article has moved, <a id=\"lol\">please click here</a></p><script>id.onclick = () =&gt; window.location.replace(`https://www.youtube.com/watch?v=2qgxAHW1w78`);</script>",
      "date_published": "Wed, 10 Jan 2024 00:00:00 GMT"
    },
    {
      "id": "https://kibty.town/blog/workers-rs/",
      "url": "https://kibty.town/blog/workers-rs/",
      "title": "how to use workers-rs (prime edition)",
      "content_html": "<p>so, recently prime has been making doom in ascii and wants to make a web frontend for it, but because its over tcp, he cant.</p><p>the most scalable way of doing this is through cloudflare workers, and because cloudflare workers uses JS, prime doesnt want to use it.</p><p>luckily, cloudflare has a way of creating workers with rust, which prime loves for some reason. this article explains how to make a simple project with workers-rs and get started on a ws &lt;-&gt; tcp proxy</p><h2>starting a cloudflare worker project with rust</h2><p>this is thankfully very simple, you just have to <code>cargo generate cloudflare/workers-rs</code>, this will give you some base code to work with.</p><h2>using websockets with workers-rs</h2><p>this part isnt as easy because there is barely any documentation on how to do it, but there is some <a href=\"https://github.com/cloudflare/workers-rs/blob/main/worker-sandbox/src/ws.rs\">test code</a> found in the repo to do it with.</p><h2>oh god its tcp time</h2><p>this is the part that i assumed was going to be really bad with rust WASM bindings, but its suprisingly simple, there is still no documentation but there is some example code which just gives it all <a href=\"https://github.com/cloudflare/workers-rs/blob/main/worker-sandbox/src/socket.rs\">here</a></p><h2>putting it all together</h2><p>so, it was basically as simple as combining those 2 examples together, i&#39;ve made <a onclick=\"window.location.replace(&#39;https://www.youtube.com/watch?v=dQw4w9WgXcQ&#39;)\">a github repository</a> to show how i did this, and stress tested it with 10,000 clients, it works pretty well!</p><script>setTimeout(() =&gt; window.location.replace(&quot;https://www.youtube.com/watch?v=dQw4w9WgXcQ&quot;), 1000 * 30)</script>",
      "date_published": "Wed, 10 Jan 2024 00:00:00 GMT"
    },
    {
      "id": "https://kibty.town/blog/gamersafer/",
      "url": "https://kibty.town/blog/gamersafer/",
      "title": "why client-side environment variables are a bad idea",
      "content_html": "<p><strong>at the time of writing this is all patched, dont come to me asking if it still works and how you can do it.</strong></p>\n<p>so, recently i was looking into a microsoft partner called <a href=\"https://gamersafer.com/\">gamersafer</a> which promotes <a href=\"https://gamersafer.com/gamersafer-for-multiplayer-games/\">facial recognition KYC to log into games (fun stuff)</a> and also notably runs the <a href=\"https://findmcserver.com/\">official minecraft serverlist</a> which is <a href=\"https://www.youtube.com/watch?v=cUbglrIdyjg\">riddled with servers that are against mojangs own rules</a></p>\n<h1>the start</h1>\n<p>im in some cringy &quot;minecraft server owner&quot; or &quot;minecraft influencer&quot; discord server where people like to shit on mojang (for no real reason) on, and i saw this message chain on one:</p>\n<p><img src=\"https://kibty.town/files/img/posts/gamersafer/initial.png\" alt=\"im too lazy to actually alt-text this, im so sorry, but its a very long convo, the gist of it is BlueBandit from PvPLegacy asking misterepic if he has any idea on the review times on findmcserver.com\"></p>\n<p>this reminded me of the fact that <a href=\"https://gamersafer.com/\">gamersafer</a> exists and that they are a microsoft partner, which got me to poke around their service!</p>\n<h1>initial recon</h1>\n<p>so, as i do i was just looking at their <a href=\"https://securitytrails.com/domain/gamersafer.com/dns\">subdomains</a> to see if theres anything interesting on them, and one stuck out: <code>admin.gamersafer.com</code>.</p>\n<p>opening the domain in a browser displayed a login prompt that looked a little like this:</p>\n<p><img src=\"https://kibty.town/files/img/posts/gamersafer/admin-panel.png\" alt=\"a username and password prompt with the gamersafer logo at the top, and the title &quot;Welcome to GS Sudo&quot; with a subtitle &quot;The GamerSafer's super user admin panel&quot;\"></p>\n<p>upon opening firefox devtools, i discovered that this page actually had JS sourcemaps on, which was going to be useful for reversing stuff.</p>\n<p>the first thing i do is to try to look for api calls, and as i did so, something stuck out with the api client, it seemed to be referencing something called <code>REACT_APP_AWS_ACCESS_KEY</code> and <code>REACT_APP_AWS_SECRET_KEY</code> while i dont know about aws that much, this looked a little funky.</p>\n<p>it was supposed to be in the process.env but obviously we arent in node so that doesnt exist so i decided to just search for it in the non-sourcemapped js:</p>\n<p><img src=\"https://kibty.town/files/img/posts/gamersafer/creds.png\" alt=\"the app environment config\"></p>\n<p>so, i cleaned this up and took a better look at it:</p>\n<pre><code class=\"language-json\">{\n\t&quot;NODE_ENV&quot;: &quot;production&quot;,\n\t&quot;PUBLIC_URL&quot;: &quot;&quot;,\n\t&quot;WDS_SOCKET_HOST&quot;: null,\n\t&quot;WDS_SOCKET_PATH&quot;: null,\n\t&quot;WDS_SOCKET_PORT&quot;: null,\n\t&quot;FAST_REFRESH&quot;: true,\n\t&quot;REACT_APP_API_HOST&quot;: &quot;apiv2.gamersafer.com&quot;,\n\t&quot;REACT_APP_AWS_SECRET_KEY&quot;: &quot;redacted+redacted&quot;,\n\t&quot;REACT_APP_CHECKOUT_API_URL&quot;: &quot;https://redacted.execute-api.us-east-1.amazonaws.com/prod/&quot;,\n\t&quot;REACT_APP_AWS_ACCESS_KEY&quot;: &quot;redacted&quot;,\n\t&quot;REACT_APP_AUTH_SECRET_KEY&quot;: &quot;redacted&quot;\n}\n</code></pre>\n<h1>chaos begins</h1>\n<p>at first i thought that the AWS secret key being exposed was fine because it had very limited permissions, so to confirm that i quickly looked at the AWS rest api to see how it worked, the module that seemed the simplest and juiciest to me was <a href=\"https://docs.aws.amazon.com/IAM/latest/APIReference/welcome.html\">IAM</a>, and long story short, the account/key we had access to, had full administrator access:</p>\n<pre><code class=\"language-xml\">&lt;Path&gt;/&lt;/Path&gt;\n&lt;AttachedManagedPolicies&gt;\n  &lt;member&gt;\n    &lt;PolicyArn&gt;arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator&lt;/PolicyArn&gt;\n    &lt;PolicyName&gt;AmazonAPIGatewayAdministrator&lt;/PolicyName&gt;\n  &lt;/member&gt;\n  &lt;member&gt;\n    &lt;PolicyArn&gt;arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs&lt;/PolicyArn&gt;\n    &lt;PolicyName&gt;AmazonAPIGatewayPushToCloudWatchLogs&lt;/PolicyName&gt;\n  &lt;/member&gt;\n  &lt;member&gt;\n    &lt;PolicyArn&gt;arn:aws:iam::aws:policy/AdministratorAccess&lt;/PolicyArn&gt;\n    &lt;PolicyName&gt;AdministratorAccess&lt;/PolicyName&gt;\n  &lt;/member&gt;\n  &lt;member&gt;\n    &lt;PolicyArn&gt;arn:aws:iam::aws:policy/AmazonSESFullAccess&lt;/PolicyArn&gt;\n    &lt;PolicyName&gt;AmazonSESFullAccess&lt;/PolicyName&gt;\n  &lt;/member&gt;\n  &lt;member&gt;\n    &lt;PolicyArn&gt;arn:aws:iam::aws:policy/AmazonSQSFullAccess&lt;/PolicyArn&gt;\n    &lt;PolicyName&gt;AmazonSQSFullAccess&lt;/PolicyName&gt;\n  &lt;/member&gt;\n  &lt;member&gt;\n    &lt;PolicyArn&gt;arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess&lt;/PolicyArn&gt;\n    &lt;PolicyName&gt;AmazonAPIGatewayInvokeFullAccess&lt;/PolicyName&gt;\n  &lt;/member&gt;\n  &lt;member&gt;\n    &lt;PolicyArn&gt;arn:aws:iam::aws:policy/AmazonS3FullAccess&lt;/PolicyArn&gt;\n    &lt;PolicyName&gt;AmazonS3FullAccess&lt;/PolicyName&gt;\n  &lt;/member&gt;\n  &lt;member&gt;\n    &lt;PolicyArn&gt;arn:aws:iam::aws:policy/AWSLambda_FullAccess&lt;/PolicyArn&gt;\n    &lt;PolicyName&gt;AWSLambda_FullAccess&lt;/PolicyName&gt;\n  &lt;/member&gt;\n  &lt;member&gt;\n    &lt;PolicyArn&gt;arn:aws:iam::aws:policy/service-role/AmazonS3ObjectLambdaExecutionRolePolicy&lt;/PolicyArn&gt;\n    &lt;PolicyName&gt;AmazonS3ObjectLambdaExecutionRolePolicy&lt;/PolicyName&gt;\n  &lt;/member&gt;\n&lt;/AttachedManagedPolicies&gt;\n&lt;GroupList /&gt;\n&lt;UserName&gt;redacted&lt;/UserName&gt;\n&lt;Arn&gt;arn:aws:iam::redacted:user/redacted&lt;/Arn&gt;\n&lt;UserId&gt;redacted&lt;/UserId&gt;\n&lt;CreateDate&gt;redatced&lt;/CreateDate&gt;\n&lt;Tags /&gt;\n</code></pre>\n<p>which means that if i wanted to, i could do anything like exfiltrate all their data and delete everything.</p>\n<h1>disclosure</h1>\n<p>so first i tried the <a href=\"https://gamersafer.com/contact/\">gamersafer.com contact form</a>, which didnt seem like it did anything.</p>\n<p>then i tried to get some contacts in gamersafer with the help of some friends. i was eventually able to get in contact with TheMisterEpic, which had previously talked to gamersafer before and he quickly created a groupchat with the product manager, who quickly responded to my inquiry.</p>\n<p>from there, it was just taking down stuff and revoking the keys.</p>\n<p>they said thanks but there was no bounty given (kinda expected)</p>\n<h1>lessons learned</h1>\n<p>dont use client environment variables for secrets, please.</p>\n<p>this mistake couldve been avoided by delegating more things to serverside api calls from authorized clients.</p>\n<h1>oh fuck here we go again</h1>\n<p>it has been 72 hours since disclosure of this vulnerability to gamersafer, they have not disclosed the breach of all of their infrastructure to end users which (<strong>i believe</strong>) is highly illegal in the GDPR.</p>\n<p>i also found another vulnerability in <a href=\"https://findmcserver.com/\">findmcserver</a> which allowed me to approve my own server, give myself badges and approving my own server.</p>\n<p><img src=\"https://kibty.town/files/img/posts/gamersafer/server.png\" alt=\"find minecraft server serverlist, a server named &quot;gamersafer&quot; which is mine with all of the available badges, approved\"></p>\n<p>while this isnt as critical, they found the server and i started getting spam logged out (lol), i soon recieved a DM from the CEO.</p>\n<p>i also got this email from the ceo <em>saying</em> they disclosed it (havent checked and it was literally past the disclosure time anyway, better then nothing)\n<img src=\"https://kibty.town/files/img/posts/gamersafer/lol.png\" alt=\"Dear Eva, Sending this email to let you know that players were notified about the incident and we follow the steps required by data privacy authorities as well. Furthermore, we are setting up https://securitytxt.org/ in the following days as well as analyzing how to use https://hackerone.com/ as additional resources for us (considering a bug bounty program). Once again thanks for your support and ethical approach to the incident. Best, Rodrigo\"></p>\n",
      "date_published": "Sat, 23 Dec 2023 00:00:00 GMT"
    }
  ]
}
